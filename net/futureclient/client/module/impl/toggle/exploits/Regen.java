/*
 * Decompiled with CFR 0.152.
 */
package me.friendly.exeter.module.impl.toggle.exploits;

import me.friendly.api.event.Listener;
import me.friendly.exeter.events.MotionUpdateEvent;
import me.friendly.exeter.module.ModuleType;
import me.friendly.exeter.module.ToggleableModule;
import me.friendly.exeter.properties.EnumProperty;
import me.friendly.exeter.properties.NumberProperty;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.potion.Potion;

public final class Regen
extends ToggleableModule {
    private final EnumProperty<Mode> mode = new EnumProperty<Mode>(Mode.POTION, "Mode", "m");
    private final NumberProperty<Float> health = new NumberProperty<Float>(Float.valueOf(20.0f), Float.valueOf(1.0f), Float.valueOf(20.0f), "Health", "h", "<3");

    public Regen() {
        super("Regen", new String[]{"regen", "fastheal"}, -5647216, ModuleType.EXPLOITS);
        this.offerProperties(this.mode, this.health);
        this.listeners.add(new Listener<MotionUpdateEvent>("regen_motion_update_listener"){

            @Override
            public void call(MotionUpdateEvent event) {
                if (Regen.this.shouldRegen()) {
                    switch ((Mode)((Object)Regen.this.mode.getValue())) {
                        case OLD: {
                            int index = 0;
                            while ((float)index < ((Regen)Regen.this).minecraft.thePlayer.getMaxHealth() - ((Regen)Regen.this).minecraft.thePlayer.getHealth()) {
                                Regen.this.minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer(((Regen)Regen.this).minecraft.thePlayer.onGround));
                                ++index;
                            }
                            break;
                        }
                        case POTION: {
                            if (!((Regen)Regen.this).minecraft.thePlayer.isPotionActive(Potion.REGENERATION)) break;
                            int index = 0;
                            while ((float)index < ((Regen)Regen.this).minecraft.thePlayer.getMaxHealth() - ((Regen)Regen.this).minecraft.thePlayer.getHealth()) {
                                Regen.this.minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer(((Regen)Regen.this).minecraft.thePlayer.onGround));
                                ++index;
                            }
                            break;
                        }
                    }
                }
            }
        });
    }

    private boolean shouldRegen() {
        return this.minecraft.thePlayer.onGround && this.minecraft.thePlayer.isCollidedVertically && this.minecraft.thePlayer.getFoodStats().getFoodLevel() > 18 && !this.minecraft.thePlayer.isInWater() && !this.minecraft.thePlayer.isOnLadder() && this.minecraft.thePlayer.getHealth() < ((Float)this.health.getValue()).floatValue();
    }

    public static enum Mode {
        OLD,
        POTION;

    }
}

