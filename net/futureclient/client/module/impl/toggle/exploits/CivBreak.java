/*
 * Decompiled with CFR 0.152.
 */
package me.friendly.exeter.module.impl.toggle.exploits;

import me.friendly.api.event.Listener;
import me.friendly.api.minecraft.helper.PlayerHelper;
import me.friendly.api.minecraft.render.RenderMethods;
import me.friendly.api.stopwatch.Stopwatch;
import me.friendly.exeter.events.BlockClickedEvent;
import me.friendly.exeter.events.MotionUpdateEvent;
import me.friendly.exeter.events.PacketEvent;
import me.friendly.exeter.events.RenderEvent;
import me.friendly.exeter.module.ModuleType;
import me.friendly.exeter.module.ToggleableModule;
import me.friendly.exeter.properties.NumberProperty;
import me.friendly.exeter.properties.Property;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.RenderGlobal;
import net.minecraft.item.ItemBlock;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C0APacketAnimation;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.MathHelper;

public class CivBreak
extends ToggleableModule {
    private C07PacketPlayerDigging dig;
    private boolean shouldRender;
    private BlockPos pos;
    private static EnumFacing side;
    private final Stopwatch stopwatch = new Stopwatch();
    private final NumberProperty<Double> reach = new NumberProperty<Double>(Double.valueOf(5.0), 3.0, 15.0, "Reach", "r");
    private final NumberProperty<Long> delay = new NumberProperty<Long>(Long.valueOf(300L), 0L, 1000L, "Delay", "d");
    private final Property<Boolean> blockPlace = new Property<Boolean>(false, "BlockPlace", "block", "b");

    public CivBreak() {
        super("CivBreak", new String[]{"civbreak", "cb"}, -18944, ModuleType.EXPLOITS);
        this.offerProperties(this.reach, this.delay, this.blockPlace);
        this.listeners.add(new Listener<PacketEvent>("civbreak_packet_listener"){

            @Override
            public void call(PacketEvent event) {
                C07PacketPlayerDigging packet;
                if (event.getPacket() instanceof C07PacketPlayerDigging && (CivBreak.this.dig == null || event.getPacket() != CivBreak.this.dig) && CivBreak.this.pos != null && (packet = (C07PacketPlayerDigging)event.getPacket()).func_180762_c() == C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK) {
                    CivBreak.this.dig = packet;
                    CivBreak.this.shouldRender = true;
                }
            }
        });
        this.listeners.add(new Listener<MotionUpdateEvent>("civbreak_nigger_listener"){

            @Override
            public void call(MotionUpdateEvent event) {
                if (CivBreak.this.dig != null && ((CivBreak)CivBreak.this).minecraft.thePlayer.getDistance(CivBreak.this.pos.getX(), CivBreak.this.pos.getY(), CivBreak.this.pos.getZ()) < (Double)CivBreak.this.reach.getValue() && CivBreak.this.stopwatch.hasCompleted((Long)CivBreak.this.delay.getValue()) && CivBreak.this.pos != null) {
                    float[] rotations = CivBreak.this.rotations(CivBreak.this.pos);
                    switch (event.getTime()) {
                        case BEFORE: {
                            event.setRotationYaw(PlayerHelper.wrapAngleTo180(rotations[0]));
                            event.setRotationPitch(PlayerHelper.wrapAngleTo180(rotations[1]));
                            break;
                        }
                        case AFTER: {
                            ((CivBreak)CivBreak.this).minecraft.thePlayer.sendQueue.addToSendQueue(new C0APacketAnimation());
                            ((CivBreak)CivBreak.this).minecraft.thePlayer.sendQueue.addToSendQueue(CivBreak.this.dig);
                            if (((Boolean)CivBreak.this.blockPlace.getValue()).booleanValue() && !(((CivBreak)CivBreak.this).minecraft.thePlayer.getHeldItem().getItem() instanceof ItemBlock)) {
                                ((CivBreak)CivBreak.this).minecraft.thePlayer.sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(CivBreak.this.pos, -1, ((CivBreak)CivBreak.this).minecraft.thePlayer.getCurrentEquippedItem(), 0.0f, 0.0f, 0.0f));
                            }
                            CivBreak.this.stopwatch.reset();
                        }
                    }
                }
            }
        });
        this.listeners.add(new Listener<BlockClickedEvent>("civbreak_blockclick_listener"){

            @Override
            public void call(BlockClickedEvent event) {
                CivBreak.this.pos = event.getBlockPos();
                side = event.getEnumFacing();
                ((CivBreak)CivBreak.this).minecraft.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.START_DESTROY_BLOCK, CivBreak.this.pos, side));
                ((CivBreak)CivBreak.this).minecraft.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK, CivBreak.this.pos, side));
            }
        });
        this.listeners.add(new Listener<RenderEvent>("civ_break_module_render_world_hook"){

            @Override
            public void call(RenderEvent event) {
                if (CivBreak.this.pos == null || side == null) {
                    return;
                }
                if (CivBreak.this.pos != null && CivBreak.this.shouldRender) {
                    RenderMethods.enableGL3D();
                    double x = (double)CivBreak.this.pos.getX() - ((CivBreak)CivBreak.this).minecraft.getRenderManager().viewerPosX;
                    double y = (double)CivBreak.this.pos.getY() - ((CivBreak)CivBreak.this).minecraft.getRenderManager().viewerPosY;
                    double z = (double)CivBreak.this.pos.getZ() - ((CivBreak)CivBreak.this).minecraft.getRenderManager().viewerPosZ;
                    AxisAlignedBB boundingBox = AxisAlignedBB.fromBounds(x, y, z, x + 1.0, y + 1.0, z + 1.0);
                    GlStateManager.color(1.0f, 1.0f, 0.0f, 0.3f);
                    RenderGlobal.drawOutlinedBoundingBox(boundingBox, -1);
                    GlStateManager.color(1.0f, 1.0f, 0.0f, 0.2f);
                    RenderMethods.drawBox(boundingBox);
                    RenderMethods.disableGL3D();
                }
            }
        });
    }

    public float[] rotations(BlockPos pos) {
        double x = (double)pos.getX() + 0.5 - this.minecraft.thePlayer.posX;
        double y = (double)pos.getZ() + 0.5 - this.minecraft.thePlayer.posZ;
        double z = (double)pos.getY() + 0.5 - (this.minecraft.thePlayer.posY + (double)this.minecraft.thePlayer.getEyeHeight());
        double var14 = MathHelper.sqrt_double(x * x + y * y);
        float yaw = (float)(Math.atan2(y, x) * 180.0 / Math.PI) - 90.0f;
        float pitch = (float)(-(Math.atan2(z, var14) * 180.0 / Math.PI));
        return new float[]{yaw, pitch};
    }

    @Override
    protected void onDisable() {
        super.onDisable();
        this.pos = null;
        this.dig = null;
        side = null;
        this.shouldRender = false;
    }
}

